Exercise 1.1
10
12
8
3
(+ 8 -2) -> 6
Value: a
Value: b
(+ 3 4 12) -> 19
#f
4
16
(+ 2 4) -> 6
(* 4 4) -> 16

Exercise 1.2
(/ (+ 5
      4 
	  (- 2 (- 3 (+ 6 (/ 4 5))))) 
   (* 3 
	  (- 6 2)
	  (- 2 7)))
	  
Exercise 1.3
#lang simply-scheme
(define (sum-largest-squares a b c)
  (cond ((and (> a b) (> b c)) (* a b))
        ((and (> a b) (> c b)) (* a c))
        (else (* b c))))
	  
Exercise 1.4
This procedure defines a procedure called a-plus-abs-b with formal parameters a and b. The body
of the procedure specifies that if b > 0, b is added to a, and if b is < 0, b is subtracted
from a. In this way, the absolute value of b is added to a. This procedure uses an operator
that is a compound expression.

Exercise 1.5
Applicative-order: The expression he evaluates will get stuck in the recursive (p) call.
Normal-order: The expression returns 0.
Explanation: Applicative-order would evaluate (p) first. Normal-order would expand out to
(if (= 0 0) 0 (p)) which returns 0 when evaluated as specified in the questions. It avoids
the (p) call altogether.

Exercise 1.6
When Alyssa attempts to compute a square root, each of the arguments of new-if are evaluated.
As a result, the recursive call to sqrt-iter will always be evaluated causing an infinite loop.
This is the difference between the if special form and the procedure new-if. For called
procedures, every argument gets called regardless of applicative or normal order. The special
form if differs because its predicate is evaluated first, then it executes the first expression
if true - ignoring the second - and the second if false - ignoring the first.

Exercise 1.7
For example take .00001 the procedure outputs ~.031, but the actual is .0031. A guess could 
be significantly off but the initial value is so small that the good-enough? check passes
since the tolerance is larger at .001. Another example is 999999. A large value eventually
hits the memory limits of the system in our version of scheme by getting longer and longer
fractional values. A system that truncates would be comparing imprecise guesses with each
check. Updating the function to compare the pevious guess to the current one does improve
accuracy of the function.

(define (sqrt-iter guess prev-guess x)
(if (good-enough? guess prev-guess)
guess
(sqrt-iter (improve guess x) guess x)))

(define (improve guess x)
(average guess (/ x guess)))

(define (average x y)
(/ (+ x y) 2))

(define (good-enough? guess prev-guess)
(< (abs (- guess prev-guess)) 0.001))

(define (square x) (* x x))

Exercise 1.8
(define (square guess) (* guess guess))

(define (improve guess x)
  (/ (+ (/ x (square guess)) (* 2 guess)) 3))

(define (good-enough? guess prev-guess)
  (< (abs (- guess prev-guess)) 0.0000000000000000001))

(define (cbrt-iter guess x)
  (if (good-enough? (improve guess x) guess)
      guess
      (cbrt-iter (improve guess x) x)))

(define (cbrt x) (cbrt-iter 1.0 x))